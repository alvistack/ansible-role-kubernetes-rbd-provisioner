---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: all
  remote_user: root
  become: true
  roles:
    - role: bootstrap
    - role: python

- hosts: kube-master:kube-node
  remote_user: root
  become: true
  roles:
    - role: docker
    - role: cri-tools
    - role: kubernetes-cni
    - role: kubectl
    - role: kubelet
    - role: kubeadm

- hosts: kube-master
  remote_user: root
  become: true
  roles:
    - role: etcd
      etcd_cert_file: "/etc/kubernetes/pki/etcd/server.crt"
      etcd_key_file: "/etc/kubernetes/pki/etcd/server.key"
      etcd_trusted_ca_file: "/etc/kubernetes/pki/etcd/ca.crt"
      etcd_peer_cert_file: "/etc/kubernetes/pki/etcd/peer.crt"
      etcd_peer_key_file: "/etc/kubernetes/pki/etcd/peer.key"
      etcd_peer_trusted_ca_file: "/etc/kubernetes/pki/etcd/ca.crt"
      etcd_listen_peer_urls: "https://{{ ansible_eth1.ipv4.address }}:2380,https://127.0.0.1:2380"
      etcd_listen_client_urls: "https://{{ ansible_eth1.ipv4.address }}:2379,https://127.0.0.1:2379"
      etcd_initial_advertise_peer_urls: "https://{{ ansible_eth1.ipv4.address }}:2380"
      etcd_initial_cluster: >-
        {%- for host in ansible_play_hosts -%}
        {{ host }}=https://{{ hostvars[host].ansible_eth1.ipv4.address }}:2380,
        {%- endfor -%}
      etcd_advertise_client_urls: "https://{{ ansible_eth1.ipv4.address }}:2379"
      etcd_csr_subject_alt_name: >-
        {%- for host in ansible_play_hosts -%}
        DNS:{{ host }},
        {%- endfor -%}
        DNS:localhost,
        {%- for host in ansible_play_hosts -%}
        IP:{{ hostvars[host].ansible_eth1.ipv4.address }},
        {%- endfor -%}
        IP:127.0.0.1
      etcd_peer_csr_subject_alt_name: >-
        {%- for host in ansible_play_hosts -%}
        DNS:{{ host }},
        {%- endfor -%}
        DNS:localhost,
        {%- for host in ansible_play_hosts -%}
        IP:{{ hostvars[host].ansible_eth1.ipv4.address }},
        {%- endfor -%}
        IP:127.0.0.1
    - role: kubernetes
      kubernetes_cluster_name: "{{ hostvars[groups['kube-master'][0]].ansible_machine_id | to_uuid }}"
      kubernetes_etcd_external_endpoints: >-
        {%- for host in ansible_play_hosts -%}
        https://{{ hostvars[host].ansible_eth1.ipv4.address }}:2379,
        {%- endfor -%}
      kubelet_node_ip: "{{ ansible_eth1.ipv4.address }}"
      kube_apiserver_advertise_address: "{{ ansible_eth1.ipv4.address }}"
      kube_apiserver_csr_subject_alt_name: >-
        {%- for host in ansible_play_hosts -%}
        DNS:{{ host }},
        {%- endfor -%}
        DNS:localhost,
        {%- for host in ansible_play_hosts -%}
        IP:{{ hostvars[host].ansible_eth1.ipv4.address }},
        {%- endfor -%}
        IP:127.0.0.1
    - role: kubernetes-addon-manager
    - role: kubernetes-weave

  post_tasks:
    - name: kubectl version
      command: kubectl version
      register: result
      changed_when: result is not succeeded

- hosts: kube-node:!kube-master
  remote_user: root
  become: true
  tasks:
    - name: kubeadm token create
      shell: |
        set -o pipefail
        kubeadm token create
      args:
        executable: "/bin/bash"
      delegate_to: "{{ groups['kube-master'][0] }}"
      register: result
      until: result is succeeded
      changed_when: result is not succeeded
      ignore_errors: true

    - name: kubeadm join
      vars:
        kube_apiserver_advertise_address: "{{ hostvars[groups['kube-master'][0]].ansible_eth1.ipv4.address }}"
        kubelet_node_ip: "{{ ansible_eth1.ipv4.address }}"
        kubeadm_token: "{{ result.stdout }}"
      shell: |
        set -o pipefail
        cat > /etc/kubernetes/kubeadm.conf <<EOF
        apiVersion: kubeadm.k8s.io/v1beta2
        kind: JoinConfiguration
        discovery:
          bootstrapToken:
            apiServerEndpoint: {{ kube_apiserver_advertise_address }}:6443
            token: {{ kubeadm_token }}
            unsafeSkipCAVerification: true
          tlsBootstrapToken: {{ kubeadm_token }}
        nodeRegistration:
          name: {{ ansible_hostname }}
          criSocket: /var/run/dockershim.sock
          taints: []
          kubeletExtraArgs:
            node-ip: {{ kubelet_node_ip }}
            runtime-cgroups: /systemd/system.slice
        EOF
        kubeadm join \
          --config=/etc/kubernetes/kubeadm.conf \
          --ignore-preflight-errors=all
      args:
        executable: "/bin/bash"
      register: result
      until: result is succeeded
      changed_when: result is not succeeded
      ignore_errors: true

- hosts: ceph-mon
  remote_user: root
  become: true
  roles:
    - role: ceph-common
      ceph_fsid: "{{ hostvars[groups['ceph-mon'][0]].ansible_machine_id | to_uuid }}"
      ceph_mon_initial_members: >-
        {%- for host in groups['ceph-mon'] -%}
        {{ host }},
        {%- endfor -%}
      ceph_mon_host: >-
        {%- for host in groups['ceph-mon'] -%}
        {{ hostvars[host].ansible_eth1.ipv4.address }},
        {%- endfor -%}
      ceph_public_network: "{{ (ansible_eth1.ipv4.network + '/' + ansible_eth1.ipv4.netmask) | ipaddr('net') }}"
      ceph_cluster_network: "{{ (ansible_eth1.ipv4.network + '/' + ansible_eth1.ipv4.netmask) | ipaddr('net') }}"
    - role: ceph-mon
    - role: ceph-mgr
    - role: ceph-osd
      ceph_osd_config:
        - { state: "present", section: "osd", option: "osd max write size", value: "512" }
        - { state: "present", section: "osd", option: "osd disk threads", value: "2" }
        - { state: "present", section: "osd", option: "osd map cache size", value: "256" }
        - { state: "present", section: "osd", option: "osd memory target", value: "268435456" }
    - role: ceph-mds
      ceph_mds_config:
        - { state: "present", section: "mds", option: "mds cache memory limit", value: "268435456" }
    - role: ceph-rgw

  post_tasks:
    - name: ceph-volume lvm create
      shell: |
        set -o pipefail
        ceph-volume lvm create \
          --bluestore \
          --data /dev/sdb
      args:
        executable: "/bin/bash"
      changed_when: false
      ignore_errors: true

    - name: ceph osd pool create rbd
      shell: |
        set -o pipefail
        ceph osd pool create rbd 8 8
        ceph osd pool set rbd size 3
        ceph osd pool set rbd min_size 2
      args:
        executable: "/bin/bash"
      when: ansible_hostname == ansible_play_hosts[0]
      changed_when: false
      ignore_errors: true

    - name: ceph osd pool create cephfs_metadata
      shell: |
        set -o pipefail
        ceph osd pool create cephfs_metadata 32 32
        ceph osd pool set cephfs_metadata size 3
        ceph osd pool set cephfs_metadata min_size 2
      args:
        executable: "/bin/bash"
      when: ansible_hostname == ansible_play_hosts[0]
      changed_when: false
      ignore_errors: true

    - name: ceph osd pool create cephfs_data
      shell: |
        set -o pipefail
        ceph osd pool create cephfs_data 128 128
        ceph osd pool set cephfs_data size 3
        ceph osd pool set cephfs_data min_size 2
      args:
        executable: "/bin/bash"
      when: ansible_hostname == ansible_play_hosts[0]
      changed_when: false
      ignore_errors: true

    - name: ceph fs new cephfs
      shell: |
        set -o pipefail
        ceph fs new cephfs cephfs_metadata cephfs_data
        ceph fs set cephfs standby_count_wanted 0
        ceph fs set cephfs max_mds 1
      args:
        executable: "/bin/bash"
      when: ansible_hostname == ansible_play_hosts[0]
      changed_when: false
      ignore_errors: true

- hosts: kube-master
  remote_user: root
  become: true
  pre_tasks:
    - name: fetch ceph client.admin key
      shell: |
        set -o pipefail
        ceph auth get-key client.admin
      args:
        executable: "/bin/bash"
      delegate_to: "{{ groups['ceph-mon'][0] }}"
      register: ceph_client_admin_result
      changed_when: ceph_client_admin_result is not succeeded

  roles:
    - role: kubernetes-rbd-provisioner
      rbd_provisioner_monitors: >-
        {%- for host in groups['ceph-mon'] -%}
        {{ hostvars[host].ansible_eth1.ipv4.address }}:6789,
        {%- endfor -%}
      rbd_provisioner_admin_secret: "{{ ceph_client_admin_result.stdout }}"

  post_tasks:
    - name: setup rbd as default storageclass
      vars:
        ansible_python_interpreter: "/usr/bin/python3"
      k8s:
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: rbd
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
        state: present
      when: ansible_hostname == groups['kube-master'][0]
      register: result
      until: result is succeeded

    - name: create pvc
      vars:
        ansible_python_interpreter: "/usr/bin/python3"
      k8s:
        state: "present"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: root
            namespace: default
          spec:
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 100Mi

    - name: create pod
      vars:
        ansible_python_interpreter: "/usr/bin/python3"
      k8s:
        state: "present"
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: busybox
            namespace: default
          spec:
            containers:
              - name: busybox
                image: busybox
                command:
                  - sleep
                  - "3600"
                volumeMounts:
                  - name: root
                    mountPath: /root
            volumes:
              - name: root
                persistentVolumeClaim:
                  claimName: root
